package ogp.other;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import ogp.game.Bag;
import ogp.game.Block;
import ogp.game.Gem;
import ogp.game.Player;
import ogp.game.Spaceship;
import ogp.game.World;
import ogp.util.Point;
import ogp.util.Rectangle;
import ogp.util.Vector;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class WorldTest {

	private Player player;
    private Block[] blocks;
    private Gem[] gems;
    private Spaceship ship;
    private World world;

    @BeforeEach
    void setUp() {
        // Correcte invoerwaarden
    	gems = new Gem[]{new Gem(new Rectangle(new Point(30, 30), 5, 5), Color.RED)};
    	ship = new Spaceship(new Rectangle(new Point(50,50), 10,10), new ArrayList<>());
    	Bag bag = new Bag(ship, new ArrayList<>(List.of(new Gem(new Rectangle(new Point(30, 30), 5, 5), Color.RED))));
        Vector speed = new Vector(0, 0);
        
        player = new Player(new Rectangle(new Point(10,10), 10,10), speed, bag, 5, 10);
        
        blocks = new Block[]{new Block(new Rectangle(new Point(20,20), 10,10))};
        ship = new Spaceship(new Rectangle(new Point(50,50), 10,10), new ArrayList<>());

        // Correcte wereld aanmaken
        world = new World(10, 10, 100, 100, player, blocks, ship, gems);
    }
    
    /**
     * Test de constructor voor alle foutgevallen en correcte invoer
     */
    @Test
    void testConstructor() {
        // Correcte invoer moet werken
        assertDoesNotThrow(() -> new World(10, 10, 100, 100, player, blocks, ship, gems));

        // Negatieve zwaartekrachtconstante
        assertThrows(IllegalArgumentException.class, () -> new World(-1, 10, 100, 100, player, blocks, ship, gems));

        // Negatieve maximale tijdsdelta
        assertThrows(IllegalArgumentException.class, () -> new World(10, -5, 100, 100, player, blocks, ship, gems));

        // Breedte van 0
        assertThrows(IllegalArgumentException.class, () -> new World(10, 10, 0, 100, player, blocks, ship, gems));

        // Negatieve hoogte
        assertThrows(IllegalArgumentException.class, () -> new World(10, 10, 100, -1, player, blocks, ship, gems));

        // Speler is null
        assertThrows(IllegalArgumentException.class, () -> new World(10, 10, 100, 100, null, blocks, ship, gems));

        // Blokkenlijst is null
        assertThrows(IllegalArgumentException.class, () -> new World(10, 10, 100, 100, player, null, ship, gems));

        // Null-element in blokkenlijst
        assertThrows(IllegalArgumentException.class, () -> new World(10, 10, 100, 100, player, new Block[]{null}, ship, gems));

        // Edelstenenlijst is null
        assertThrows(IllegalArgumentException.class, () -> new World(10, 10, 100, 100, player, blocks, ship, null));

        // Null-element in edelstenenlijst
        assertThrows(IllegalArgumentException.class, () -> new World(10, 10, 100, 100, player, blocks, ship, new Gem[]{null}));

        // Ruimteschip buiten de grenzen van de wereld
        assertThrows(IllegalArgumentException.class, () -> new World(10, 10, 100, 100, player, blocks, 
        	    new Spaceship(new Rectangle(new Point(110,110), 10,10), new ArrayList<>()), gems));
    }

    /**
     * Test movePlayerHorz met ongeldige invoer
     */
    @Test
    void testMovePlayerHorzInvalid() {
        assertThrows(IllegalArgumentException.class, () -> world.movePlayerHorz(2)); // Alleen -1, 0, 1 toegestaan
    }

    /**
     * Test tryUpgradePlayerShip met een null-waarde
     */
    @Test
    void testTryUpgradePlayerShipNull() {
        assertThrows(IllegalArgumentException.class, () -> world.tryUpgradePlayerShip(null));
    }

    /**
     * Test jumpPlayer wanneer de speler niet dichtbij een oppervlak is en geen double jump heeft.
     */
    @Test
    void testJumpPlayerInvalid() {
        world.jumpPlayer();
        assertEquals(0, world.getPlayer().getSpeed().y());
    }

    /**
     * Test alle getters
     */
    @Test
    void testGetters() {
        assertEquals(100, world.getWidth());
        assertEquals(100, world.getHeight());
        assertEquals(10, world.getGravCst());
        assertEquals(10, world.getMaxTimeDelta());
        assertEquals(new Rectangle(Point.O(), 100, 100), world.getField());
        assertEquals(player, world.getPlayer());  // copy() zorgt ervoor dat de waarden gelijk zijn
        assertEquals(new Rectangle(player.getHitbox().getTL(), 10, 10), world.getPlayerRect());
        assertEquals(player.getHitbox().getTL(), world.getPlayerTopleft());
        assertEquals(player.getHitbox().getBL(), world.getPlayerBotLeft());
        assertArrayEquals(blocks, world.getBlocks());
        assertArrayEquals(gems, world.getGemsOnField());
        assertEquals(player.getBag().copy(), world.getPlayerBag());
        assertEquals(player.getGems(), world.getPlayerGems());
        assertEquals(false, world.getGravSwitched());
        assertEquals(false, world.getVictory());
    }

    /**
     * Test getShipOnField als er een ruimteschip is
     */
    @Test
    void testGetShipOnField() {
        assertEquals(ship, world.getShipOnField());
    }

    /**
     * Test getShipOnField als er geen ruimteschip is
     */
    @Test
    void testGetShipOnFieldNull() {
        World worldNoShip = new World(10, 10, 100, 100, player, blocks, null, gems);
        assertNull(worldNoShip.getShipOnField());
    }
}

